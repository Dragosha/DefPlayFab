------------------
local game = require "game.game"
local dirtylarry = require "dirtylarry.dirtylarry"
local si = require "ludobits.m.simple_input"
local ga = require "googleanalytics.ga"

local lb = require "main.leaderboard.lb"
local txt = require "main.txt"

local StartPosition=0
local MaxResults=20
local state=1
local db="weekly"
local function onexit(self)
    --checkNickname(self.nickname)
	if self.exitproxy then
	game.loadProxy(self.exitproxy)
	else
	game.loadProxy("#menuproxy")
	end
end
local function onChange(self)
    --checkNickname(self.nickname)
    game.loadProxy("#nicknameproxy")
end

local function onFailed2(error)
    print("Something went wrong with your first API call.", error.errorMessage)
end
local function onFailed(error)
    print("Something went wrong with your first API call.", error.errorMessage)
    gui.set_text(gui.get_node("name"), error.errorMessage)
    gui.set_text(gui.get_node("loading"), "Something went wrong :(")
end

local function onLeaderboardSuccess(result)
    print("leaderboard:")
    --pprint(result)

    gui.set_enabled(gui.get_node("loading"),false)
    local board=result.Leaderboard or {}
    local nametext=""
    local scoretext=""
    for i=1, #board do
        local dn=board[i].DisplayName or "noname"
		local pos=StartPosition+i
        nametext=nametext..pos..". "..dn.."\n"
        local value=board[i].StatValue
        scoretext=scoretext..value.."\n"

		if board[i].PlayFabId==lb.PlayFabId then
			gui.set_position(gui.get_node("me"), vmath.vector3(10, -10-(i-1)*30.28, 0))
			gui.set_enabled(gui.get_node("me"), true)
		end
    end
    gui.set_text(gui.get_node("name"), nametext)
    gui.set_text(gui.get_node("score"), scoretext)

	---
	if  #board>=MaxResults then
		gui.set_enabled(gui.get_node("next"),true)
	else
		gui.set_enabled(gui.get_node("next"),false)
	end
	if  StartPosition>0 then
		gui.set_enabled(gui.get_node("prev"),true)
	else
		gui.set_enabled(gui.get_node("prev"),false)
	end
end

local function sinchronize(result)
	if lb.DisplayName~=lb.nickname then
		gui.set_text(gui.get_node("nickname"), lb.DisplayName or "NONAME")
		lb.nickname=lb.DisplayName or "NONAME"
	end
end

local function onLoginSuccess(result)
    print("Congratulations, get leaderboard!")
	lb.getPlayerProfile(lb.PlayFabId, sinchronize, onFailed2)
	lb.getLeaderboard(db,onLeaderboardSuccess, onFailed, MaxResults)
	gui.set_enabled(gui.get_node("dailybox"),true)
	--onSwitch()
end

local function onNext()
	StartPosition=StartPosition+MaxResults
	lb.getLeaderboard(db,onLeaderboardSuccess, onFailed,MaxResults,StartPosition)
	gui.set_enabled(gui.get_node("next"),false)
	gui.set_enabled(gui.get_node("prev"),false)
	gui.set_enabled(gui.get_node("me"), false)
end
local function onPrev()
	StartPosition=StartPosition-MaxResults
	lb.getLeaderboard(db,onLeaderboardSuccess, onFailed,MaxResults,StartPosition)
	gui.set_enabled(gui.get_node("next"),false)
	gui.set_enabled(gui.get_node("prev"),false)
	gui.set_enabled(gui.get_node("me"), false)
end

local function setDB()
	if state==1 then
		gui.set_text(gui.get_node("title"), "3x3 "..txt.get.daily)
		gui.set_text(gui.get_node("B"), txt.get.weekly)
		db="daily"
	elseif state==2 then
		gui.set_text(gui.get_node("title"),"3x3 "..txt.get.weekly)
		gui.set_text(gui.get_node("B"),  txt.get.knight_top)
		db="weekly"
	elseif state==3 then
		gui.set_text(gui.get_node("title"), txt.get.knight_top)
		gui.set_text(gui.get_node("B"), txt.get.mage_top)
		db="knight"
	elseif state==4 then
		gui.set_text(gui.get_node("title"), txt.get.mage_top)
		gui.set_text(gui.get_node("B"), txt.get.thief_top)
		db="mage"
	elseif state==5 then
		gui.set_text(gui.get_node("title"), txt.get.thief_top)
		gui.set_text(gui.get_node("B"), txt.get.paladin_top)
		db="thief"
	elseif state==6 then
		gui.set_text(gui.get_node("title"), txt.get.paladin_top)
		gui.set_text(gui.get_node("B"), txt.get.top4)
		db="paladin"
	elseif state==7 then
		gui.set_text(gui.get_node("title"), txt.get.top4)
		gui.set_text(gui.get_node("B"), txt.get.daily)
		db="four"
	end
	StartPosition=0
	lb.getLeaderboard(db,onLeaderboardSuccess, onFailed,MaxResults,StartPosition)
end
local function onSwitch()
	state=state+1
	if state==8 then state=1 end
	setDB()
	gui.set_enabled(gui.get_node("next"),false)
	gui.set_enabled(gui.get_node("prev"),false)
	gui.set_enabled(gui.get_node("me"), false)
end

function init(self)

	if game.currentscene==game.MODEMENU then
		if game.db=="daily" then
			state=1
		elseif game.db=="four" then
			state=7
		end
		self.exitproxy="#modeproxy"
	else
		state=1
	end

	ga.get_default_tracker().screenview("leaderboard")
	game.currentscene=game.LEADERBOARD

    si.acquire()
    si.register("exit", onexit)
    si.register("change", onChange)

    gui.set_text(gui.get_node("nickname"), lb.nickname or "NONAME")
	gui.set_enabled(gui.get_node("me"), false)
	si.register("next", onNext)
	si.register("prev", onPrev)
	gui.set_enabled(gui.get_node("next"),false)
	gui.set_enabled(gui.get_node("prev"),false)
	gui.set_enabled(gui.get_node("dailybox"),false)
	si.register("switch", onSwitch)
    ----------------------------------

    lb.sigIn(onLoginSuccess, onFailed)
    ----------------------------------

	gui.set_text(gui.get_node("loading"), txt.get.loading)
	gui.set_text(gui.get_node("A"), txt.get.nickname)
	gui.set_text(gui.get_node("youare"), txt.get.youare)
	setDB()
end

function final(self)
    si.release()
	si.unregister()
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
    si.on_input(action_id, action,self)
	if action_id==game.BACK and action.released then
		onexit()
	end

	--    self.scrollarea = dirtylarry:scrollarea("scrollarea", action_id, action, self.scrollarea, function()end)
    --self.nickname=dirtylarry:input("nickname", action_id, action, gui.KEYBOARD_TYPE_DEFAULT, lb.nickname, function(self,nickname)  checkNickname(nickname)  end)
end
